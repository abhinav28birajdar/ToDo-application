import 'package:hive/hive.dart';

// Part directive for Hive's generated code.
// The file name should match: part 'todo.g.dart';
// This 'todo.g.dart' file will be generated by `build_runner`.
part 'todo.g.dart';

// HiveType annotation for marking the class as a Hive type.
// typeId must be unique for each class registered with Hive.
@HiveType(typeId: 0) // Unique ID for Todo model
class Todo extends HiveObject {
  // HiveField annotations for marking fields to be stored in Hive.
  // fieldId must be unique within this class.
  @HiveField(0)
  String id; // Unique ID for the todo item

  @HiveField(1)
  String title; // Title of the todo

  @HiveField(2)
  String description; // Optional description

  @HiveField(3)
  bool isCompleted; // Whether the todo is completed

  @HiveField(4)
  DateTime creationDate; // Date when the todo was created

  @HiveField(5)
  DateTime? dueDate; // Optional due date

  @HiveField(6)
  String? categoryId; // Optional category ID

  @HiveField(7)
  int priority; // Priority level (1=High, 2=Medium, 3=Low)

  @HiveField(8)
  List<String> tags; // List of tags for the todo

  @HiveField(9)
  bool hasNotification; // Whether the todo has a notification set

  @HiveField(10)
  DateTime? notificationTime; // When to show notification

  @HiveField(11)
  DateTime? completionDate; // When the todo was completed

  @HiveField(12)
  String? notes; // Additional notes

  Todo({
    required this.id,
    required this.title,
    this.description = '', // Default empty description
    this.isCompleted = false, // Default not completed
    required this.creationDate,
    this.dueDate,
    this.categoryId,
    this.priority = 2, // Default medium priority
    this.tags = const [], // Default empty tags
    this.hasNotification = false, // Default no notification
    this.notificationTime,
    this.completionDate,
    this.notes,
  });

  // copyWith method for creating a new Todo instance with updated values
  // This is useful for immutable data updates, often used with state management
  Todo copyWith({
    String? id,
    String? title,
    String? description,
    bool? isCompleted,
    DateTime? creationDate,
    DateTime? dueDate,
    String? categoryId,
    int? priority,
    List<String>? tags,
    bool? hasNotification,
    DateTime? notificationTime,
    DateTime? completionDate,
    String? notes,
  }) {
    return Todo(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      isCompleted: isCompleted ?? this.isCompleted,
      creationDate: creationDate ?? this.creationDate,
      dueDate: dueDate ?? this.dueDate,
      categoryId: categoryId ?? this.categoryId,
      priority: priority ?? this.priority,
      tags: tags ?? this.tags,
      hasNotification: hasNotification ?? this.hasNotification,
      notificationTime: notificationTime ?? this.notificationTime,
      completionDate: completionDate ?? this.completionDate,
      notes: notes ?? this.notes,
    );
  }

  // Helper methods for priority
  String get priorityText {
    switch (priority) {
      case 1:
        return 'High';
      case 2:
        return 'Medium';
      case 3:
        return 'Low';
      default:
        return 'Medium';
    }
  }

  // Check if todo is overdue
  bool get isOverdue {
    if (dueDate == null || isCompleted) return false;
    return dueDate!.isBefore(DateTime.now());
  }

  // Check if todo is due today
  bool get isDueToday {
    if (dueDate == null) return false;
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final due = DateTime(dueDate!.year, dueDate!.month, dueDate!.day);
    return today.isAtSameMomentAs(due);
  }

  // Compatibility getter for createdAt
  DateTime get createdAt => creationDate;

  // Factory constructor for creating Todo from JSON
  factory Todo.fromJson(Map<String, dynamic> json) {
    return Todo(
      id: json['id'] as String,
      title: json['title'] as String,
      description: json['description'] as String? ?? '',
      isCompleted: json['is_completed'] as bool? ?? false,
      creationDate: json['created_at'] != null 
          ? DateTime.parse(json['created_at'] as String)
          : DateTime.now(),
      dueDate: json['due_date'] != null 
          ? DateTime.parse(json['due_date'] as String)
          : null,
      categoryId: json['category_id'] as String?,
      priority: json['priority'] as int? ?? 2,
      tags: (json['tags'] as List<dynamic>?)?.cast<String>() ?? [],
      hasNotification: json['has_notification'] as bool? ?? false,
      notificationTime: json['notification_time'] != null 
          ? DateTime.parse(json['notification_time'] as String)
          : null,
      completionDate: json['completed_date'] != null 
          ? DateTime.parse(json['completed_date'] as String)
          : null,
      notes: json['notes'] as String?,
    );
  }

  // Convert Todo to JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'is_completed': isCompleted,
      'created_at': creationDate.toIso8601String(),
      'due_date': dueDate?.toIso8601String(),
      'category_id': categoryId,
      'priority': priority,
      'tags': tags,
      'has_notification': hasNotification,
      'notification_time': notificationTime?.toIso8601String(),
      'completed_date': completionDate?.toIso8601String(),
      'notes': notes,
    };
  }

  @override
  String toString() {
    return 'Todo{id: $id, title: $title, isCompleted: $isCompleted, priority: $priority}';
  }
}
